FROM centos:centos7 

ENV POSTGIS_EXTENSION=Y \
    PGCRYPTO_EXTENSION=Y \
    POSTGRESQL_VERSION=11 \
    HOME=/var/lib/pgsql \
    PGUSER=postgres

EXPOSE 5432

COPY scripts/scl_enable /usr/share/scripts/scl_enable

# This image must forever use UID 26 for postgres user so our volumes are
# safe in the future. This should *never* change, the last test is there
# to make sure of that.
RUN yum -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm && \
    yum -y install centos-release-scl epel-release && \
    INSTALL_PKGS="rsync tar gettext bind-utils postgresql12 postgresql12-contrib nss_wrapper postgresql12-server postgresql12-devel" && \
    yum -y --setopt=tsflags=nodocs install $INSTALL_PKGS && \
    echo "Uspeh" && \
    localedef -f UTF-8 -i en_US en_US.UTF-8 && \
    test "$(id postgres)" = "uid=26(postgres) gid=26(postgres) groups=26(postgres)" && \
    mkdir -p /var/lib/pgsql/data && \
    chown -R postgres /var/lib/pgsql || 'No such file or dir' && \
    chgrp 0 /var/lib/pgsql || 'No such file or dir' && \
    chmod -R g+rw /var/lib/pgsql || 'No such file or dir' && \
    chmod -R g+x /var/lib/pgsql || 'No such file or dir'

# install dev tools used to compile ORACLE_FDW
RUN yum-config-manager --enable rhel-server-rhscl-7-rpms && \
    yum-config-manager --enable rhel-7-server-rpms && \
    yum-config-manager --enable rhel-7-server-eus-rpms && \
    yum-config-manager --enable rhel-7-server-optional-rpms && \
    INSTALL_PKGS="wget libaio-devel llvm-toolset-7 devtoolset-7 llvm5.0" && \
    yum -y --setopt=tsflags=nodocs install $INSTALL_PKGS && \
    rpm -V $INSTALL_PKGS

# Get prefix path and path to scripts rather than hard-code them in scripts
ENV CONTAINER_SCRIPTS_PATH=/usr/share/scripts \
    ENABLED_COLLECTIONS=postgresql12

# When bash is started non-interactively, to run a shell script, for example it
# looks for this variable and source the content of this file. This will enable
# the SCL for all scripts without need to do 'scl enable'.
# ENV BASH_ENV=${CONTAINER_SCRIPTS_PATH}/scl_enable \
#     ENV=${CONTAINER_SCRIPTS_PATH}/scl_enable \
#     PROMPT_COMMAND=". ${CONTAINER_SCRIPTS_PATH}/scl_enable"

VOLUME ["/var/lib/pgsql/data"]

# install the Oracle dependencie
RUN cd /etc/yum.repos.d/ && \
    wget -nv http://yum.oracle.com/public-yum-ol7.repo && \
    wget http://yum.oracle.com/RPM-GPG-KEY-oracle-ol7 && \
    rpm --import RPM-GPG-KEY-oracle-ol7 && \
    sed -i "s/enabled=1/enabled=0/g" public-yum-ol7.repo && \
    yum-config-manager --enable ol7_oracle_instantclient && \
    INSTALL_PKGS="oracle-instantclient19.3-basic oracle-instantclient19.3-devel oracle-instantclient19.3-sqlplus" && \
    yum -y --setopt=tsflags=nodocs install $INSTALL_PKGS && \
    yum clean all



ENV PGCONFIG /usr/pgsql-12/bin
ENV ORACLE_HOME /usr/lib/oracle/19.3/client64/lib
ENV PATH /usr/pgsql-12/bin:${PATH}
ENV PGDATA /var/lib/pgsql/data
# aquire and build ORACLE_FDW_2_2_0
RUN cd /tmp && \
    wget -nv https://github.com/laurenz/oracle_fdw/archive/ORACLE_FDW_2_2_0.tar.gz && \
    tar -xzf ORACLE_FDW_2_2_0.tar.gz && \
    cd oracle_fdw-ORACLE_FDW_2_2_0  && \
    make && \
    make install && \
    rm -rf /tmp/ORACLE_FDW_2_2_0.tar.gz /tmp/oracle_fdw-ORACLE_FDW_2_2_0 /var/cache/yum

COPY docker-entrypoint.sh /usr/bin/docker-entrypoint
RUN chmod a+x /usr/bin/docker-entrypoint
ENV LD_LIBRARY_PATH /usr/lib/oracle/19.3/client64/lib:${LD_LIBRARY_PATH}
USER 26

ENTRYPOINT ["docker-entrypoint"]

EXPOSE 5432
CMD ["postgres"]
